// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.17;

import { ForkTest } from "./Fork.t.sol";
import { FixedPointMathLib } from "solmate/src/utils/FixedPointMathLib.sol";
import { WETH, ERC20, Permit, Permit2, IPool, IPermit2, Swapper } from "../contracts/periphery/Swapper.sol";

contract SwapperTest is ForkTest {
  using FixedPointMathLib for uint256;

  uint256 internal constant BOB_KEY = 0xb0b;
  address payable internal bob;

  ERC20 internal exa;
  WETH internal weth;
  ERC20 internal op;
  IPool internal pool;
  Swapper internal swapper;
  IPermit2 internal permit2;

  function setUp() external {
    vm.createSelectFork(vm.envString("OPTIMISM_NODE"), 107_610_376);

    op = ERC20(deployment("OP"));
    exa = ERC20(deployment("EXA"));
    weth = WETH(payable(deployment("WETH")));
    pool = IPool(deployment("EXAPool"));
    permit2 = IPermit2(deployment("Permit2"));
    swapper = Swapper(payable(0x75a66763A13f9772707D8A81a64447e2B2c6Cf45));
    upgrade(address(swapper), address(new Swapper(exa, weth, pool, deployment("SocketGateway"), permit2)));

    bob = payable(vm.addr(BOB_KEY));
    vm.label(bob, "bob");
    vm.prank(bob);
    op.approve(address(permit2), type(uint256).max);

    deal(address(weth), address(this), 500 ether);
    deal(address(op), address(this), 10_000 ether);
    deal(address(op), bob, 10_000 ether);
  }

  function testSwapBasic() external _checkBalance {
    uint256 balanceETH = address(this).balance;
    uint256 amountEXA = pool.getAmountOut(1 ether, weth);
    swapper.swap{ value: 1 ether }(payable(this), 0, 0);

    assertEq(address(this).balance, balanceETH - 1 ether, "eth spent");
    assertEq(exa.balanceOf(address(this)), amountEXA, "exa received");
  }

  function testSwapWithKeepAmount() external _checkBalance {
    uint256 balanceETH = address(this).balance;
    uint256 amountEXA = pool.getAmountOut(0.9 ether, weth);
    swapper.swap{ value: 1 ether }(payable(this), 0, 0.1 ether);

    assertEq(address(this).balance, balanceETH - 0.9 ether, "eth spent");
    assertEq(exa.balanceOf(address(this)), amountEXA, "exa received");
  }

  function testSwapWithKeepEqualToValue() external _checkBalance {
    uint256 balanceETH = address(this).balance;
    swapper.swap{ value: 1 ether }(payable(this), 0, 1 ether);

    assertEq(address(this).balance, balanceETH, "eth spent");
    assertEq(exa.balanceOf(address(this)), 0, "exa received");
  }

  function testSwapWithKeepHigherThanValue() external _checkBalance {
    uint256 balanceETH = address(this).balance;
    swapper.swap{ value: 1 ether }(payable(this), 0, 2 ether);

    assertEq(address(this).balance, balanceETH, "eth spent");
    assertEq(exa.balanceOf(address(this)), 0, "exa received");
  }

  function testSwapWithInaccurateSlippageSendsETHToAccount() external _checkBalance {
    uint256 balanceETH = address(this).balance;
    uint256 amountEXA = pool.getAmountOut(1 ether, weth);

    swapper.swap{ value: 1 ether }(payable(this), amountEXA * 5, 0);
    assertEq(address(this).balance, balanceETH, "eth spent");
    assertEq(exa.balanceOf(address(this)), 0, "exa received");

    swapper.swap{ value: 1 ether }(payable(this), amountEXA - 10e18, 0);
    assertEq(address(this).balance, balanceETH - 1 ether, "eth spent");
    assertEq(exa.balanceOf(address(this)), amountEXA, "exa received");
  }

  function testSwapWithAllowance() external _checkBalance {
    uint256 amount = 1 ether;
    uint256 balanceOP = op.balanceOf(address(this));
    op.approve(address(swapper), amount);

    swapper.swap(
      op,
      amount,
      // solhint-disable-next-line max-line-length
      hex"00000008545ebbb00000000000000000000000004200000000000000000000000000000000000042000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000002dda32b8e9ee8ef2b4e64825373d007cf222747d00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003c812aa3caf000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000004200000000000000000000000000000000000042000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000002dda32b8e9ee8ef2b4e64825373d007cf222747d0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000322776ae5c9d4000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002330000000000000000000000000000000000000000000000000002150001ff00a007e5c0d20000000000000000000000000000000000000000000001db00019f0001505126a132dab612db5cb9fc9ac426a0cc215a3423f9c942000000000000000000000000000000000000420004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019028400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064ce730f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000042000000000000000000000000000000000000420000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000102a0000000000000000000000000000000000000000000000000000322776ae5c9d4ee63c1e50085149247691df622eaf1a8bd0cafd40bc45154a97f5c764cbc14f9669b88837ca1490cca17c316074101420000000000000000000000000000000000000600042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000733d4004000000000000000000000000000000000000000000000000",
      0,
      0
    );

    assertEq(op.balanceOf(address(this)), balanceOP - amount, "op spent");
    assertGt(exa.balanceOf(address(this)), 0, "exa received");
  }

  function testSwapWithPermit() external _checkBalance {
    uint256 amount = 1 ether;
    uint256 balanceOP = op.balanceOf(bob);

    vm.startPrank(bob);
    swapper.swap(
      op,
      p(amount),
      // solhint-disable-next-line max-line-length
      hex"00000008545ebbb00000000000000000000000004200000000000000000000000000000000000042000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000002dda32b8e9ee8ef2b4e64825373d007cf222747d00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003c812aa3caf000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000004200000000000000000000000000000000000042000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000002dda32b8e9ee8ef2b4e64825373d007cf222747d0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000322776ae5c9d4000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002330000000000000000000000000000000000000000000000000002150001ff00a007e5c0d20000000000000000000000000000000000000000000001db00019f0001505126a132dab612db5cb9fc9ac426a0cc215a3423f9c942000000000000000000000000000000000000420004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019028400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064ce730f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000042000000000000000000000000000000000000420000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000102a0000000000000000000000000000000000000000000000000000322776ae5c9d4ee63c1e50085149247691df622eaf1a8bd0cafd40bc45154a97f5c764cbc14f9669b88837ca1490cca17c316074101420000000000000000000000000000000000000600042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000733d4004000000000000000000000000000000000000000000000000",
      0,
      0
    );
    vm.stopPrank();

    assertEq(op.balanceOf(bob), balanceOP - amount, "op spent");
    assertGt(exa.balanceOf(bob), 0, "exa received");
  }

  function testSwapWithPermit2() external _checkBalance {
    uint256 amount = 1 ether;
    uint256 balanceOP = op.balanceOf(bob);

    vm.startPrank(bob);
    swapper.swap(
      op,
      p2(amount),
      // solhint-disable-next-line max-line-length
      hex"00000008545ebbb00000000000000000000000004200000000000000000000000000000000000042000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000002dda32b8e9ee8ef2b4e64825373d007cf222747d00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003c812aa3caf000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000004200000000000000000000000000000000000042000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000002dda32b8e9ee8ef2b4e64825373d007cf222747d0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000322776ae5c9d4000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002330000000000000000000000000000000000000000000000000002150001ff00a007e5c0d20000000000000000000000000000000000000000000001db00019f0001505126a132dab612db5cb9fc9ac426a0cc215a3423f9c942000000000000000000000000000000000000420004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019028400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000afea5601b0a894451955355e79ad3026515e500d0000000000000000000000000000000000000000000000000000000064ce730f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000042000000000000000000000000000000000000420000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000102a0000000000000000000000000000000000000000000000000000322776ae5c9d4ee63c1e50085149247691df622eaf1a8bd0cafd40bc45154a97f5c764cbc14f9669b88837ca1490cca17c316074101420000000000000000000000000000000000000600042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000733d4004000000000000000000000000000000000000000000000000",
      0,
      0
    );
    vm.stopPrank();

    assertEq(op.balanceOf(bob), balanceOP - amount, "op spent");
    assertGt(exa.balanceOf(bob), 0, "exa received");
  }

  modifier _checkBalance() {
    _;
    assertEq(address(swapper).balance, 0);
  }

  function p(uint256 value) internal view returns (Permit memory) {
    (uint8 v, bytes32 r, bytes32 s) = vm.sign(
      BOB_KEY,
      keccak256(
        abi.encodePacked(
          "\x19\x01",
          op.DOMAIN_SEPARATOR(),
          keccak256(
            abi.encode(
              keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"),
              bob,
              swapper,
              value,
              op.nonces(bob),
              block.timestamp
            )
          )
        )
      )
    );
    return Permit(value, block.timestamp, v, r, s);
  }

  function p2(uint256 amount) internal view returns (Permit2 memory) {
    (uint8 v, bytes32 r, bytes32 s) = vm.sign(
      BOB_KEY,
      keccak256(
        abi.encodePacked(
          "\x19\x01",
          permit2.DOMAIN_SEPARATOR(),
          keccak256(
            abi.encode(
              keccak256(
                // solhint-disable-next-line max-line-length
                "PermitTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline)TokenPermissions(address token,uint256 amount)"
              ),
              keccak256(abi.encode(keccak256("TokenPermissions(address token,uint256 amount)"), op, amount)),
              swapper,
              uint256(keccak256(abi.encode(bob, op, amount, block.timestamp))),
              block.timestamp
            )
          )
        )
      )
    );
    return Permit2(amount, block.timestamp, abi.encodePacked(r, s, v));
  }

  // solhint-disable-next-line no-empty-blocks
  receive() external payable {}
}
