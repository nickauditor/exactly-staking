{
  "address": "0x14e2fCE145245Dda5342c0aA4202F741fA401C5D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFlashLoanRecipient",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "contract ERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc76cd03e48a480d6a21e8e79f0b4a589d225e8473a11213651521e0e481490e4",
  "receipt": {
    "to": null,
    "from": "0xDb90CDB64CfF03f254e4015C4F705C3F3C834400",
    "contractAddress": "0x14e2fCE145245Dda5342c0aA4202F741fA401C5D",
    "transactionIndex": 3,
    "gasUsed": "498851",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8a5c8ebe6844adcadb2a4f01b26d7dec66ac398bc83ff0b7ad37f934c550d53f",
    "transactionHash": "0xc76cd03e48a480d6a21e8e79f0b4a589d225e8473a11213651521e0e481490e4",
    "logs": [],
    "blockNumber": 7421177,
    "cumulativeGasUsed": "1181029",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cf0363dc0e7cf81ca4028acb9890167",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract ERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockBalancerVault.sol\":\"MockBalancerVault\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/mocks/MockBalancerVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.17;\\n\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\n\\ncontract MockBalancerVault is ReentrancyGuard {\\n  using SafeTransferLib for ERC20;\\n\\n  function flashLoan(\\n    IFlashLoanRecipient recipient,\\n    ERC20[] memory tokens,\\n    uint256[] memory amounts,\\n    bytes memory userData\\n  ) external nonReentrant {\\n    assert(tokens.length == amounts.length);\\n\\n    uint256[] memory preLoanBalances = new uint256[](tokens.length);\\n\\n    // Used to ensure `tokens` is sorted in ascending order, which ensures token uniqueness.\\n    ERC20 previousToken = ERC20(address(0));\\n\\n    for (uint256 i = 0; i < tokens.length; ++i) {\\n      ERC20 token = tokens[i];\\n      uint256 amount = amounts[i];\\n\\n      // solhint-disable-next-line custom-errors\\n      require(token > previousToken, token == ERC20(address(0)) ? \\\"Zero token\\\" : \\\"Unsorted tokens\\\");\\n      previousToken = token;\\n\\n      preLoanBalances[i] = token.balanceOf(address(this));\\n\\n      require(preLoanBalances[i] >= amount, \\\"insufficient flashloan balance\\\"); // solhint-disable-line custom-errors\\n      token.safeTransfer(address(recipient), amount);\\n    }\\n\\n    recipient.receiveFlashLoan(tokens, amounts, new uint256[](tokens.length), userData);\\n\\n    for (uint256 i = 0; i < tokens.length; ++i) {\\n      uint256 postLoanBalance = tokens[i].balanceOf(address(this));\\n      require(postLoanBalance >= preLoanBalances[i], \\\"invalid post balance\\\"); // solhint-disable-line custom-errors\\n    }\\n  }\\n}\\n\\ninterface IFlashLoanRecipient {\\n  function receiveFlashLoan(\\n    ERC20[] memory tokens,\\n    uint256[] memory amounts,\\n    uint256[] memory feeAmounts,\\n    bytes memory userData\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5f8864aafd75f731733ffa9f2bd93b22cd81e258503cbcc99820d8e47a526851\",\"license\":\"BUSL-1.1\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x43aa1509bb753f053143530705d9c4eee415691d26a4779769bf028a74e6ac69\",\"license\":\"MIT\"},\"solmate/src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa0e50a0f232da7f289430601ba927c315266b20ec739761430b0fde926fefe55\",\"license\":\"MIT\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, from) // Append the \\\"from\\\" argument.\\n            mstore(36, to) // Append the \\\"to\\\" argument.\\n            mstore(68, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because that's the total length of our calldata (4 + 32 * 3)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 100, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f2e1158c68c1f3d15b80e8a7dd92b6849f873066969562ad33c0abb80e536ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260015f55348015610013575f80fd5b506107a6806100215f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80635c38449e1461002d575b5f80fd5b61004061003b366004610554565b610042565b005b5f5460011461004f575f80fd5b60025f55815183511461006457610064610647565b5f835167ffffffffffffffff81111561007f5761007f610414565b6040519080825280602002602001820160405280156100a8578160200160208202803683370190505b5090505f805b8551811015610245575f8682815181106100ca576100ca61065b565b602002602001015190505f8683815181106100e7576100e761065b565b60200260200101519050836001600160a01b0316826001600160a01b0316115f6001600160a01b0316836001600160a01b03161461014c576040518060400160405280600f81526020016e556e736f7274656420746f6b656e7360881b815250610170565b6040518060400160405280600a8152602001692d32b937903a37b5b2b760b11b8152505b50610179575f80fd5b6040516370a0823160e01b815230600482015291935083916001600160a01b038316906370a0823190602401602060405180830381865afa1580156101c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e4919061066f565b8584815181106101f6576101f661065b565b602002602001018181525050808584815181106102155761021561065b565b60200260200101511015610227575f80fd5b61023b6001600160a01b0383168a836103b5565b50506001016100ae565b50856001600160a01b031663f04f27078686885167ffffffffffffffff81111561027157610271610414565b60405190808252806020026020018201604052801561029a578160200160208202803683370190505b50876040518563ffffffff1660e01b81526004016102bb94939291906106c0565b5f604051808303815f87803b1580156102d2575f80fd5b505af11580156102e4573d5f803e3d5ffd5b505050505f5b85518110156103a8575f8682815181106103065761030661065b565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610354573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610378919061066f565b905083828151811061038c5761038c61065b565b602002602001015181101561039f575f80fd5b506001016102ea565b505060015f555050505050565b5f60405163a9059cbb60e01b5f52836004528260245260205f60445f80895af13d15601f3d1160015f511416171691505f6060528060405250806103f7575f80fd5b50505050565b6001600160a01b0381168114610411575f80fd5b50565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561045157610451610414565b604052919050565b5f67ffffffffffffffff82111561047257610472610414565b5060051b60200190565b5f82601f83011261048b575f80fd5b813560206104a061049b83610459565b610428565b8083825260208201915060208460051b8701019350868411156104c1575f80fd5b602086015b848110156104dd57803583529183019183016104c6565b509695505050505050565b5f82601f8301126104f7575f80fd5b813567ffffffffffffffff81111561051157610511610414565b610524601f8201601f1916602001610428565b818152846020838601011115610538575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f8060808587031215610567575f80fd5b8435610572816103fd565b935060208581013567ffffffffffffffff8082111561058f575f80fd5b818801915088601f8301126105a2575f80fd5b81356105b061049b82610459565b81815260059190911b8301840190848101908b8311156105ce575f80fd5b938501935b828510156105f55784356105e6816103fd565b825293850193908501906105d3565b97505050604088013592508083111561060c575f80fd5b61061889848a0161047c565b9450606088013592508083111561062d575f80fd5b505061063b878288016104e8565b91505092959194509250565b634e487b7160e01b5f52600160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f6020828403121561067f575f80fd5b5051919050565b5f815180845260208085019450602084015f5b838110156106b557815187529582019590820190600101610699565b509495945050505050565b608080825285519082018190525f9060209060a0840190828901845b828110156107015781516001600160a01b0316845292840192908401906001016106dc565b505050838103828501526107158188610686565b905083810360408501526107298187610686565b9050838103606085015284518082525f5b8181101561075557868101840151838201850152830161073a565b505f828201840152601f01601f19160101969550505050505056fea26469706673582212208f17795ca6b71ae489f73e6ee7f3e8805db4660e9e3ee4187f15643fb4eb24f464736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610029575f3560e01c80635c38449e1461002d575b5f80fd5b61004061003b366004610554565b610042565b005b5f5460011461004f575f80fd5b60025f55815183511461006457610064610647565b5f835167ffffffffffffffff81111561007f5761007f610414565b6040519080825280602002602001820160405280156100a8578160200160208202803683370190505b5090505f805b8551811015610245575f8682815181106100ca576100ca61065b565b602002602001015190505f8683815181106100e7576100e761065b565b60200260200101519050836001600160a01b0316826001600160a01b0316115f6001600160a01b0316836001600160a01b03161461014c576040518060400160405280600f81526020016e556e736f7274656420746f6b656e7360881b815250610170565b6040518060400160405280600a8152602001692d32b937903a37b5b2b760b11b8152505b50610179575f80fd5b6040516370a0823160e01b815230600482015291935083916001600160a01b038316906370a0823190602401602060405180830381865afa1580156101c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e4919061066f565b8584815181106101f6576101f661065b565b602002602001018181525050808584815181106102155761021561065b565b60200260200101511015610227575f80fd5b61023b6001600160a01b0383168a836103b5565b50506001016100ae565b50856001600160a01b031663f04f27078686885167ffffffffffffffff81111561027157610271610414565b60405190808252806020026020018201604052801561029a578160200160208202803683370190505b50876040518563ffffffff1660e01b81526004016102bb94939291906106c0565b5f604051808303815f87803b1580156102d2575f80fd5b505af11580156102e4573d5f803e3d5ffd5b505050505f5b85518110156103a8575f8682815181106103065761030661065b565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610354573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610378919061066f565b905083828151811061038c5761038c61065b565b602002602001015181101561039f575f80fd5b506001016102ea565b505060015f555050505050565b5f60405163a9059cbb60e01b5f52836004528260245260205f60445f80895af13d15601f3d1160015f511416171691505f6060528060405250806103f7575f80fd5b50505050565b6001600160a01b0381168114610411575f80fd5b50565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561045157610451610414565b604052919050565b5f67ffffffffffffffff82111561047257610472610414565b5060051b60200190565b5f82601f83011261048b575f80fd5b813560206104a061049b83610459565b610428565b8083825260208201915060208460051b8701019350868411156104c1575f80fd5b602086015b848110156104dd57803583529183019183016104c6565b509695505050505050565b5f82601f8301126104f7575f80fd5b813567ffffffffffffffff81111561051157610511610414565b610524601f8201601f1916602001610428565b818152846020838601011115610538575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f8060808587031215610567575f80fd5b8435610572816103fd565b935060208581013567ffffffffffffffff8082111561058f575f80fd5b818801915088601f8301126105a2575f80fd5b81356105b061049b82610459565b81815260059190911b8301840190848101908b8311156105ce575f80fd5b938501935b828510156105f55784356105e6816103fd565b825293850193908501906105d3565b97505050604088013592508083111561060c575f80fd5b61061889848a0161047c565b9450606088013592508083111561062d575f80fd5b505061063b878288016104e8565b91505092959194509250565b634e487b7160e01b5f52600160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f6020828403121561067f575f80fd5b5051919050565b5f815180845260208085019450602084015f5b838110156106b557815187529582019590820190600101610699565b509495945050505050565b608080825285519082018190525f9060209060a0840190828901845b828110156107015781516001600160a01b0316845292840192908401906001016106dc565b505050838103828501526107158188610686565b905083810360408501526107298187610686565b9050838103606085015284518082525f5b8181101561075557868101840151838201850152830161073a565b505f828201840152601f01601f19160101969550505050505056fea26469706673582212208f17795ca6b71ae489f73e6ee7f3e8805db4660e9e3ee4187f15643fb4eb24f464736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 36143,
        "contract": "contracts/mocks/MockBalancerVault.sol:MockBalancerVault",
        "label": "locked",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}